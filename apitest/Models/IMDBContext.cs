// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace apitest.Models
{
    public partial class IMDBContext : DbContext
    {
        public string connection = "Data Source=DESKTOP-98SSS6F;Initial Catalog=IMDB;Integrated Security=True";
        public IMDBContext()
        {
        }

        public IMDBContext(DbContextOptions<IMDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ActorView> ActorView { get; set; }
        public virtual DbSet<MovieView> MovieView { get; set; }
        public virtual DbSet<NameBasics> NameBasics { get; set; }
        public virtual DbSet<TitlesBasic> TitlesBasic { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer(connection);
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Danish_Norwegian_CI_AS");

            modelBuilder.Entity<ActorView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ActorView");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.Characters)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.Job)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.PrimaryName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PrimaryTitle)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MovieView>(entity =>
            {


                entity.HasNoKey();

                entity.ToView("MovieView");

                entity.Property(e => e.Characters)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.Genre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalTitle)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.PrimaryName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PrimaryTitle)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NameBasics>(entity =>
            {
                entity.HasKey(e => e.Nconst);

                entity.Property(e => e.Nconst)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PrimaryName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TitlesBasic>(entity =>
            {
                entity.HasKey(e => new { e.Tconst, e.PrimaryTitle });

                entity.Property(e => e.Tconst)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrimaryTitle)
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalTitle)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.TitleType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}